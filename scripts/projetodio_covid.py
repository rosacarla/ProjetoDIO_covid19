# -*- coding: utf-8 -*-
"""projetoDIO_covid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gNIN_9oVd3_PCCbycrLQmKXURL68ZAh_

# Projeto DIO COVID-19

### Autora: Carla Edila Santos da Rosa Silveira
### Instituição: Digital Innovation One
### Problema: análise exploratória com dados do Covid-19
### Conjunto de dados: Novel Corona Virus 2019 Dataset
Disponível em: https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset#https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset

## Importar bibliotecas do Python
"""

import pandas as pd
import numpy as np
from datetime import datetime

pip install plotly #opcional: instalado por falha na importacao do Plotly, msg modulo inexistente

pip install cufflinks #opcional: pcufflinks concecta o Pandas ao Plotly.

import plotly.express as px  #bibliotecas de visualização com recrusos em java script
import plotly.graph_objects as go

"""## Importar e visualizar o conjunto de dados"""

url = 'https://github.com/rosacarla/projetoDIO_covid19/blob/main/covid_19_data.csv?raw=true'               
#falta substituir o camimnho do dataset pela versao atualizada

df = pd.read_csv(url, parse_dates=['ObservationDate', 'Last Update']) #importa campos como data e não como texto
df #chama o conjunto de dados para visualização em javascript

"""##### **Dicionário de dados**
###### SNo (Serial Number)  = Número  de serie
###### ObservationDate = Data de observação
###### Province/State = Cidade/Estado
###### Country/Region = País/Região
###### Last Update = Última Atualização 
###### Confirmed = Confirmados
###### Deaths = Óbitos
###### Recovered = Recuperados

## Conferência dos tipos de variáveis por coluna
"""

df .dtypes

"""## Limpeza nos nomes das colunas"""

import re   

def corrige_colunas(col_name):  #correcao para eliminar caracteres especiais, maiúsculas, espaços em branco
    return re.sub(r"[/ | ]", "", col_name).lower()  #padrão de escrita das colunas é letra minúscula

corrige_colunas('AvqO/C  ou')   #teste da correcao

df.columns = [corrige_colunas(col) for col in df.columns] #lista as colunas, depois atribui novos nomes
df

"""## Exploração de amostras de dados"""

df.countryregion.value_counts()   #listagem de 5 primeiros e 5 últimos países

df.countryregion.unique()  #listagem de todos os países

df.loc[df.countryregion == 'Brazil']  #selecao de amostra do Brasil

brasil = df.loc[  #seleção com loc é por nome 
    (df.countryregion == 'Brazil') &
    (df.confirmed > 0)
]

brasil

"""## Visualização de casos confirmados"""

px.line(brasil, 'observationdate', 'confirmed', title="Casos confirmados no Brasil")
#gera e exibe gráfico de cados confirmados

"""## Contagem de novos casos por dia"""

brasil['novoscasos'] = list(map(
    lambda x: 0 if (x==0) else brasil ['confirmed'].iloc[x] - brasil['confirmed'].iloc[x-1],
    np.arange(brasil.shape[0]) 
))  #pode desconsiderar a advertencia sobre sintaxe, porque a função está criada e nao intere.

brasil

"""## Visualização de novos casos por dia"""

px.line(brasil, x='observationdate', y='novoscasos', title="Novos casos por dia")

"""## Visualização de casos de óbito por dia"""

fig = go.Figure() #criacao de figura 

fig.add_trace(
        go.Scatter(x=brasil.observationdate, y=brasil.deaths, name='Óbitos',
                  mode="lines+markers", line={'color':'red'})
)
#criacao do layout
fig.update_layout(title="Óbitos por COVID-19 no Brasil")

fig.show()

"""## Cálculo da taxa média de crescimento de casos
taxa_crescimento = (presente/passado)**(1/n) - 1
"""

def taxa_crescimento(data, variable, data_inicio = None, data_fim = None):
    #Se data_inicio for none, define com a primeira data disponivel.
    if data_inicio == None:
        data_inicio = data.observationdate.loc[data[variable] > 0].min() #minima data tem ao menos 1 caso
    else:
        data_inicio = pd.to_datetime(data_inicio) #passa a data como string ou texto
    
    if data_fim == None:
        data_fim = data.observationdate.iloc[-1] #passa a ultima data
    else:
        data_fim = pd.to_datetime(data_fim)
        
    #Definição de valores do presente e passado
    passado = data.loc[data.observationdate == data_inicio, variable].values[0]
    presente = data.loc[data.observationdate == data_fim, variable].values[0]
    
    #Definição do numero de pontos no tempo que serão avaliados
    n = (data_fim - data_inicio).days
    
    #Calculo da taxa de crescimento
    taxa = (presente/passado)**(1/n) -1 
    
    return taxa*100 #retorna a taxa em porcentagem

#Taxa de crescimento médio do COVID no Brasil em todo o periodo
taxa_crescimento(brasil, 'confirmed')

#Taxa de crecimento mpedio do COVID no Brasil por dia 
def taxa_crescimento_diaria(data, variable, data_inicio=None):
    #Se data_inicio for none, define com a primeira data disponivel.
    if data_inicio == None:
        data_inicio = data.observationdate.loc[data[variable] > 0].min() #minima data tem ao menos 1 caso
    else:
        data_inicio = pd.to_datetime(data_inicio) #passa a data como string ou texto
        
    data_fim = data.observationdate.max()
    #Define nro de pontos no tempo que serao avaliados
    n = (data_fim - data_inicio).days
    
    #Taxa calculada de variacao de um dia para o outro
    taxas = list(map(
        lambda x: (data[variable].iloc[x] - data[variable].iloc[x-1]) / data[variable].iloc[x-1],
        range(1, n+1)
    ))
    return np.array(taxas) * 100

tx_dia = taxa_crescimento_diaria(brasil, 'confirmed')

tx_dia

#Preparação da plotagem do gráfico
primeiro_dia = brasil.observationdate.loc[brasil.confirmed > 0].min()

px.line(x=pd.date_range(primeiro_dia, brasil.observationdate.max())[1:],
       y=tx_dia, title='Taxa de crescimento de casos confirmados no Brasil')

"""## Predições"""

from statsmodels.tsa.seasonal import seasonal_decompose #traz tendencia, sazonalidade, ruido
import matplotlib.pyplot as plt

confirmados = brasil.confirmed
confirmados.index = brasil.observationdate
confirmados

#Decomposição das series temporais
res = seasonal_decompose(confirmados)

fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(12,10))

ax1.plot(res.observed) #serie dos casos observados
ax2.plot(res.trend) #serie das tendencias
ax3.plot(res.seasonal) #serie da sazonalidade
ax4.plot(confirmados.index, res.resid) #serie do ruído
ax4.axhline(0, linestyle= 'dashed', c='black') #traça linha divisoria em zero
plt.show  #exibe graficos

"""# ARIMA"""

!pip install pmdarima

from pmdarima.arima import auto_arima
modelo = auto_arima(confirmados)